<!-- ant build.xml file for k5n ical lib -->
<!-- $Id: build.xml,v 1.24 2007/12/13 03:18:31 cknudsen Exp $ -->
<!--

Build targets:

  dist (default): compile and build jar files
  javadoc: build javadoc-based HTML documentation
  test: run the JUnit-based unit tests
  source-zip: create zip files of the source code
  clean: remove compiled/generated files

  all: abbreviation for dist, javadoc, source-zip


-->

<project name="javacaltools" default="dist" basedir=".">
  <description>Top-level build file for k5n javacaltools</description>

  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="doc"  location="doc"/>

  <property name="test" location="test"/>
  <property name="testbuild" location="testbuild"/>

  <property name="version"  value="0.4.4"/>
  <property name="jodatime-jar"  value="lib/joda-time-1.4.jar"/>
  <property name="google-rrule-jar"  value="lib/google-rfc2445.jar"/>
  <property name="javacsv-jar"  value="lib/javacsv.jar"/>
  <property name="commons-code-jar"  value="lib/commons-codec-1.3.jar"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init,compile-ical,compile-calendarpanel"
        description="compile the source"/>

  <target name="compile-ical" depends="init">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" source="1.5" target="1.5"
      includes="us/k5n/ical/**">
      <classpath>
        <pathelement path="${jodatime-jar}"/>
        <pathelement path="${google-rrule-jar}"/>
        <pathelement path="${javacsv-jar}"/>
      	<pathelement path="${commons-code-jar}"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-calendarpanel" depends="init">
    <!-- Compile: calendarpanel with 1.2 -->
    <javac srcdir="${src}" destdir="${build}" source="1.2" target="1.2"
      includes="us/k5n/ui/calendar/**">
    </javac>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the k5n-ical-${version}.jar file -->
    <jar jarfile="${dist}/lib/k5n-ical-${version}.jar" basedir="${build}"
      excludes="**/journal/*.class,**/ui/calendar/*.class">
      <zipfileset src="${jodatime-jar}" />
      <zipfileset src="${google-rrule-jar}" />
      <zipfileset src="${javacsv-jar}" />
      <zipfileset src="${commons-code-jar}" />
    </jar>

    <!-- Build jar for calendarpanel -->
    <jar jarfile="${dist}/lib/k5n-calendarpanel-${version}.jar" basedir="${build}"
      includes="**/ui/calendar/*.class">
      <manifest>
        <attribute name="Main-Class" value="us.k5n.ui.calendar.CalendarPanelTest"/>
      </manifest>
    </jar>

    <!-- Put all the lib and k5njournal files into a single jar
         and designate the main class -->
    <jar jarfile="${dist}/k5n-journal-${version}.jar" basedir="${build}">
    <manifest>
       <attribute name="Main-Class" value="us.k5n.journal.Main"/>
    </manifest>
    <zipfileset src="${jodatime-jar}" />
    <zipfileset src="${google-rrule-jar}" />
    <zipfileset src="${javacsv-jar}" />
    <zipfileset src="${commons-code-jar}"/>
    </jar>
  </target>

  <target name="javadoc">
    <mkdir dir="${dist}/doc"/>
    <javadoc packagenames="us.k5n.ical.*"
      sourcepath="src" destdir="${doc}/ical/api"
      windowtitle="k5n ical API">
    </javadoc>
    <zip destfile="${dist}/doc/k5n-ical-doc-${version}.zip">
      <zipfileset dir="${doc}/ical" prefix="k5n-ical-doc-${version}" />
    </zip>

    <javadoc packagenames="us.k5n.ui.calendar.*"
      sourcepath="src" destdir="${doc}/calendarpanel/api"
      windowtitle="k5n CalendarPanel API">
    </javadoc>
    <zip destfile="${dist}/doc/k5n-calendarpanel-doc-${version}.zip">
      <zipfileset dir="${doc}/calendarpanel" prefix="k5n-calendarpanel-doc-${version}" />
    </zip>
  </target>

  <!-- for use in making source code releases -->
  <target name="source-zip">
    <mkdir dir="${dist}/src"/>
    <zip destfile="${dist}/src/k5n-ical-src-${version}.zip">
      <zipfileset dir="${src}" prefix="k5n-ical-src-${version}"
        includes="us/k5n/ical/*.java" />
    </zip>
    <zip destfile="${dist}/src/k5n-calendarpanel-src-${version}.zip">
      <zipfileset dir="${src}" prefix="k5n-calendarpanel-src-${version}"
        includes="us/k5n/ui/calendar/*.java" />
    </zip>
    <zip destfile="${dist}/src/k5n-all-src-${version}.zip">
      <zipfileset dir="." prefix="k5n-all-src-${version}"
        includes="build.xml,README.txt,ChangeLog,AUTHORS" />
      <zipfileset dir="${src}" prefix="k5n-all-src-${version}/src" />
      <zipfileset dir="${test}" prefix="k5n-all-src-${version}/test" />
      <zipfileset dir="lib" prefix="k5n-all-src-${version}/lib" />
    </zip>
  </target>

  <target name="all" depends="compile,dist,javadoc,source-zip" />

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${doc}"/>
  </target>

  <!-- Build the JUnit test classes -->
  <target name="compile-test" depends="init"
        description="compile the test source" >
    <mkdir dir="${testbuild}"/>
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${test}" destdir="${testbuild}">
      <classpath>
        <pathelement path="${dist}/lib/k5n-ical-${version}.jar" />
      </classpath>
    </javac>
  </target>

  <!-- Run the JUnit test classes -->
  <target name="test" depends="compile-test">
    <junit fork="yes" haltonfailure="yes">
      <formatter type="plain" usefile="false" />
      <classpath>
        <pathelement location="${testbuild}" />
        <pathelement location="${testbuild}/data" />
        <pathelement path="${dist}/lib/k5n-ical-${version}.jar" />
      </classpath>
      <batchtest>
        <fileset dir='${testbuild}' includes='**/*Test.class'/>
      </batchtest>
    </junit>
  </target>
</project>
